import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion 20
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "dtyl.game.com"
        minSdkVersion 14
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'mmyx_qp'
                    arguments 'NDK_TOOLCHAIN_VERSION=4.9'
                    arguments 'APP_PLATFORM=android-' + PROP_TARGET_SDK_VERSION

                    def module_paths = [project.file("../../../cocos2d-x").absolutePath,
                                        project.file("../../../cocos2d-x/cocos").absolutePath,
                                        project.file("../../../cocos2d-x/external").absolutePath]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        // should use '/'
                        module_paths = module_paths.collect { it.replaceAll('\\\\', '/') }
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    } else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }

                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect { it as String })
                }
            }
        }

        ndk {
            //根据需要 自行选择添加的对应cpu类型的.so库。
            abiFilters 'armeabi-v7a','x86'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }

        manifestPlaceholders = [
                XG_ACCESS_ID:"2100281859",
                XG_ACCESS_KEY:"AS7TA285HL8L",
        ]
    }
    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
    }
    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }
    signingConfigs {

        release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
                v2SigningEnabled false
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
    productFlavors {
    }
}

def getCocosCommandPath() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return 'cocos.bat'
    }
    else {
        // on unix like system, can not get environments variables easily
        // so run a shell script to get environment variable sets by cocos2d-x setup.py
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = project.file('get_environment.sh')
                standardOutput = os
            }
            ext.console_path = os.toString().trim()
        }
        return new File(console_path + '/cocos').absolutePath;
    }
}

// a method used to invoke the cocos luacompile command
def compileLua(srcDir, dstDir, doCompile, is64bit, doEncrypt) {
    def compileArgs = ['luacompile', '-s', srcDir, '-d', dstDir]
    if (!doCompile) {
        compileArgs << '--disable-compile'
    }
    else if (is64bit) {
        compileArgs << '--bytecode-64bit'
    }

    if (doEncrypt) {
        compileArgs << '-e'
        compileArgs << '-k'
        compileArgs << project.property('PROP_LUA_ENCRYPT_KEY')
        compileArgs << '-b'
        compileArgs << project.property('PROP_LUA_ENCRYPT_SIGN')
    }

    // commandLine compileArgs
    println 'running command : ' + 'cocos ' + compileArgs.join(' ')
    exec {
        // if you meet problem, just replace `getCocosCommandPath()` to the path of cocos command
        executable getCocosCommandPath()
        args compileArgs
    }

    // remove the lua files in dstDir
    delete fileTree(dstDir) {
        include '**/*.lua'
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        copy {
           from "${buildDir}/../../../../../androidAssets"
           into "${buildDir}/intermediates/assets/${variant.dirName}/"
        }

//        copy {
//            from "${buildDir}/../../../../../client/ciphercode/32bit/base/res"
//            into "${buildDir}/intermediates/assets/${variant.dirName}/base/res"
//        }
//
//        copy {
//            from "${buildDir}/../../../../../client/ciphercode/32bit/command"
//            into "${buildDir}/intermediates/assets/${variant.dirName}/command"
//        }

//        copy {
//            from "${buildDir}/../../../../../client/base/config.json"
//            into "${buildDir}/intermediates/assets/${variant.dirName}/base"
//        }
        // copy {
        //     from "${buildDir}/../../../../cocos2d-x/cocos/scripting/lua-bindings/script"
        //     into  "${buildDir}/intermediates/assets/${variant.dirName}/src/cocos"
        // }

        // compile & encrypt the scripts if necessary
        def compileScript = (variant.name.compareTo('release') == 0)
        if (project.hasProperty('PROP_COMPILE_SCRIPT')) {
            compileScript = (PROP_COMPILE_SCRIPT.compareTo('1') == 0)
        }

        def encryptLua = project.hasProperty('PROP_LUA_ENCRYPT') && (PROP_LUA_ENCRYPT.compareTo('1') == 0)
        if (compileScript || encryptLua) {
            // -1 means not build bytecode
            // 0 means build 32bit only
            // 1 means build 64bit only
            // 2 means build both 32bit & 64bit
            def buildType = -1
            if (compileScript) {
                def need64 = false
                def need32 = false
                def abis = PROP_APP_ABI.split(':').collect{it as String}
                abis.each{ abi->
                    if (abi.compareTo('arm64-v8a') == 0) {
                        need64 = true
                    }
                    else
                    {
                        need32 = true
                    }
                }

                if (need64 && need32) {
                    buildType = 2
                }
                else if (need64) {
                    buildType = 1
                }
                else {
                    buildType = 0
                }
            }
//这里使用手工编译lua,不自动生成
            // invoke cocos command to compile & encrypt the lua files
//            switch (buildType) {
//                case -1:
//                    compileLua("${buildDir}/intermediates/assets/${variant.dirName}/src",
//                               "${buildDir}/intermediates/assets/${variant.dirName}/src",
//                               false, false, encryptLua)
//                    break
//                case 0:
//                    compileLua("${buildDir}/intermediates/assets/${variant.dirName}/src",
//                               "${buildDir}/intermediates/assets/${variant.dirName}/src",
//                               true, false, encryptLua)
//                    break
//                case 1:
//                    compileLua("${buildDir}/intermediates/assets/${variant.dirName}/src",
//                               "${buildDir}/intermediates/assets/${variant.dirName}/src/64bit",
//                               true, true, encryptLua)
//
//                    // remove the lua files in src dir
//                    delete fileTree("${buildDir}/intermediates/assets/${variant.dirName}/src") {
//                        include '**/*.lua'
//                    }
//                    delete "${buildDir}/intermediates/assets/${variant.dirName}/src/cocos"
//                    break
//                case 2:
//                    compileLua("${buildDir}/intermediates/assets/${variant.dirName}/src",
//                               "${buildDir}/intermediates/assets/${variant.dirName}/src/64bit",
//                               true, true, encryptLua)
//                    compileLua("${buildDir}/intermediates/assets/${variant.dirName}/src",
//                               "${buildDir}/intermediates/assets/${variant.dirName}/src",
//                               true, false, encryptLua)
//                    break
//            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':libcocos2dx')
    compile files('libs/libammsdk.jar')
    compile files('libs/alipaySdk-20160223.jar')
    compile files('libs/Amap_2DMap_V2.9.2_20161026.jar')
    compile files('libs/AMap_Location_V3.1.0_20161027.jar')
    compile files('libs/android-support-v4.jar')
    compile files('libs/banksdk.jar')
    compile files('libs/bugly_agent.jar')
    compile files('libs/bugly_crash_release.jar')
    compile files('libs/bugly_crash_release.jar')
    compile files('libs/okhttp-3.4.1.jar')
    compile files('libs/okio-1.8.0.jar')
    compile files('libs/pay2.5.1.1.jar')
    compile files('libs/json_simple-1.1.jar')
    compile files('libs/SocialSDK_sms.jar')
    compile files('libs/SocialSDK_WeChat_Simplify.jar')
    compile files('libs/umeng_social_api.jar')
    compile files('libs/umeng_social_net.jar')
    compile files('libs/umeng_social_tool.jar')
    compile files('libs/wechat-sdk-android-with-mta-1.1.6.jar')
    //完整的信鸽依赖三个都必须有，如果发生依赖冲突请根据对应的依赖版本号选择高版本的依赖。（使用jcenter自动接入请确认libs 中没有信鸽的相关jar包）
    //信鸽3.2.2 release版本
    //完整的信鸽依赖三个都必须有，如果发生依赖冲突请根据对应的依赖版本号选择高版本的依赖。（使用jcenter自动接入请                    确认libs 中没有信鸽的相关jar包）
    //信鸽3.2.3 beta版本
    //compile 'com.tencent.xinge:xinge:3.2.3_1-beta'
    //信鸽jar
    compile 'com.tencent.xinge:xinge:3.2.2-release'
    //wup包
    compile 'com.tencent.wup:wup:1.0.0.E-release'
    //mid包
    compile 'com.tencent.mid:mid:4.0.6-release'
    compile files('libs/pay2.5.1.1.jar')
    compile files('libs/okio-1.8.0.jar')
}
